/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
export namespace Components {
  interface DiscordMirror {
    /**
     * The HighlightJS theme to apply to markdown. Must have `useStyles` enabled
     */
    highlightTheme: string;
    /**
     * If read protection is enabled in your database, the Firebase project's Web API Key
     */
    token: string;
    /**
     * The URL of the Firebase Realtime Database to pull data from
     */
    url: string;
    /**
     * If false, will not apply any text styling. See https://stenciljs.com/docs/styling#things-to-remember-with-shadow-dom for help styling from consuming applications
     */
    useStyles: boolean;
  }
  interface LoadingIndicator {}
}
declare global {
  interface HTMLDiscordMirrorElement extends Components.DiscordMirror, HTMLStencilElement {}
  var HTMLDiscordMirrorElement: {
    prototype: HTMLDiscordMirrorElement;
    new (): HTMLDiscordMirrorElement;
  };
  interface HTMLLoadingIndicatorElement extends Components.LoadingIndicator, HTMLStencilElement {}
  var HTMLLoadingIndicatorElement: {
    prototype: HTMLLoadingIndicatorElement;
    new (): HTMLLoadingIndicatorElement;
  };
  interface HTMLElementTagNameMap {
    'discord-mirror': HTMLDiscordMirrorElement;
    'loading-indicator': HTMLLoadingIndicatorElement;
  }
}
declare namespace LocalJSX {
  interface DiscordMirror {
    /**
     * The HighlightJS theme to apply to markdown. Must have `useStyles` enabled
     */
    highlightTheme?: string;
    /**
     * If read protection is enabled in your database, the Firebase project's Web API Key
     */
    token?: string;
    /**
     * The URL of the Firebase Realtime Database to pull data from
     */
    url?: string;
    /**
     * If false, will not apply any text styling. See https://stenciljs.com/docs/styling#things-to-remember-with-shadow-dom for help styling from consuming applications
     */
    useStyles?: boolean;
  }
  interface LoadingIndicator {}
  interface IntrinsicElements {
    'discord-mirror': DiscordMirror;
    'loading-indicator': LoadingIndicator;
  }
}
export { LocalJSX as JSX };
declare module '@stencil/core' {
  export namespace JSX {
    interface IntrinsicElements {
      'discord-mirror': LocalJSX.DiscordMirror & JSXBase.HTMLAttributes<HTMLDiscordMirrorElement>;
      'loading-indicator': LocalJSX.LoadingIndicator & JSXBase.HTMLAttributes<HTMLLoadingIndicatorElement>;
    }
  }
}
